apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-gettingstarted-deployment
  namespace: white
spec:
  selector:
    matchLabels:
      app: node-gettingstarted
  replicas: 1
  template:
    metadata:
      labels:
        app: node-gettingstarted
    spec:
      containers:
        - name: node-gettingstarted
          # enter the path to your image, be sure to include the correct region prefix
          image: nrt.ocir.io/nrcbpbtrtyz0/regs-container:${BUILDRUN_HASH}
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              protocol: TCP
      imagePullSecrets:
        - name: asys-system-secret
#------------------------------------------------------------------SERVICE---------------------------------------------------------------------------------------------
---
apiVersion: v1
kind: Service
metadata:
  name: node-gettingstarted-service
  namespace: white
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: node-gettingstarted
#-------------------------------------------------------------------INGRESS--------------------------------------------------------------------------------------------
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: node-ingress
  namespace: white
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - bam-e.mlhuillier.net
    secretName: net-tls
  ingressClassName: nginx
  rules:
  - host: bam-e.mlhuillier.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: node-gettingstarted-service
            port:
              number: 80
#apiVersion: v1
#kind: Service
#metadata:
#  name: node-gettingstarted-service
#  namespace: white
#  annotations: 
#    service.beta.kubernetes.io/oci-load-balancer-shape: "10Mbps"
#spec:
#  type: LoadBalancer
#  ports:
#    - port: 80
#      protocol: TCP
#      targetPort: 3000
#  selector:
#    app: node-gettingstarted
